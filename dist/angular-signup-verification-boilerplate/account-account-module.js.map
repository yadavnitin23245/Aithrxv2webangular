{"version":3,"sources":["./src/app/account/account-routing.module.ts","./src/app/account/account.module.ts","./src/app/account/forgot-password.component.ts","./src/app/account/forgot-password.component.html","./src/app/account/layout.component.ts","./src/app/account/layout.component.html","./src/app/account/register.component.ts","./src/app/account/register.component.html","./src/app/account/reset-password.component.ts","./src/app/account/reset-password.component.html","./src/app/account/verify-email.component.ts","./src/app/account/verify-email.component.html"],"names":[],"mappings":"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","file":"account-account-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\nimport { VerifyEmailComponent } from './verify-email.component';\r\nimport { ForgotPasswordComponent } from './forgot-password.component';\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'register', component: RegisterComponent },\r\n            { path: 'verify-email', component: VerifyEmailComponent },\r\n            { path: 'forgot-password', component: ForgotPasswordComponent },\r\n            { path: 'reset-password', component: ResetPasswordComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule,FormsModule  } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\nimport { VerifyEmailComponent } from './verify-email.component';\r\nimport { ForgotPasswordComponent } from './forgot-password.component';\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        AccountRoutingModule\r\n    ],\r\n    declarations: [\r\n        LayoutComponent,\r\n        LoginComponent,\r\n        RegisterComponent,\r\n        VerifyEmailComponent,\r\n        ForgotPasswordComponent,\r\n        ResetPasswordComponent\r\n    ]\r\n})\r\nexport class AccountModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first, finalize } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'forgot-password.component.html' })\r\nexport class ForgotPasswordComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            email: ['', [Validators.required, Validators.email]]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        debugger;\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.alertService.clear();\r\n        this.accountService.ForgotPasswordPost(this.f.email.value)\r\n            .pipe(first())\r\n            .pipe(finalize(() => this.loading = false))\r\n            .subscribe({\r\n                next: () => this.alertService.success('Please check your email for password reset instructions'),\r\n                error: error => this.alertService.error(error)\r\n            });\r\n    }\r\n}\r\n","<!-- <h3 class=\"card-header\">Forgot Password</h3>\r\n<div class=\"card-body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group\">\r\n            <label>Email</label>\r\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\r\n                <div *ngIf=\"f.email.errors.email\">Email is invalid</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                Submit\r\n            </button>\r\n            <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n        </div>\r\n    </form>\r\n</div> -->\r\n\r\n\r\n<section id=\"reset-password\" class=\"logoin-section\">\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-12 col-md-8 col-lg-5 mx-auto\">\r\n                <h2>Forgot password </h2>\r\n                <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\"  class=\"col-lg-10 mt-4 mx-auto\">\r\n                    <div class=\"form-group\">\r\n                        <input placeholder=\"Enter Your Email\" type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n                        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.email.errors.required\">Email is required</div>\r\n                            <div *ngIf=\"f.email.errors.email\">Email is invalid</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                            Submit\r\n                        </button>\r\n                        <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  </section>","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AccountService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: AccountService\r\n    ) {\r\n        // redirect to home if already logged in\r\n        if (this.accountService.accountValue) {\r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n}","<!-- <div class=\"container-fuild\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-10 mx-auto mt-5\">\r\n            <div class=\"card m-3\">\r\n                <router-outlet></router-outlet>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div> -->\r\n<div class=\"container-fuild\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!-- <router-outlet></router-outlet> -->","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\nimport { MustMatch } from '@app/_helpers';\r\n\r\n@Component({ templateUrl: 'register.component.html' })\r\nexport class RegisterComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            title: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            email: ['', [Validators.required, Validators.email]],\r\n            password: ['', [Validators.required, Validators.minLength(6)]],\r\n            confirmPassword: ['', Validators.required],\r\n            acceptTerms: [false, Validators.requiredTrue]\r\n        }, {\r\n            validator: MustMatch('password', 'confirmPassword')\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.register(this.form.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Registration successful, please check your email for verification instructions', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<h3 class=\"card-header\">Register</h3>\r\n<div class=\"card-body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-row\">\r\n            <div class=\"form-group col\">\r\n                <label>Title</label>\r\n                <select formControlName=\"title\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.title.errors }\">\r\n                    <option value=\"\"></option>\r\n                    <option value=\"Mr\">Mr</option>\r\n                    <option value=\"Mrs\">Mrs</option>\r\n                    <option value=\"Miss\">Miss</option>\r\n                    <option value=\"Ms\">Ms</option>\r\n                </select>\r\n                <div *ngIf=\"submitted && f.title.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.title.errors.required\">Title is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group col-5\">\r\n                <label>First Name</label>\r\n                <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group col-5\">\r\n                <label>Last Name</label>\r\n                <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\r\n                <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label>Email</label>\r\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\r\n                <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-row\">\r\n            <div class=\"form-group col\">\r\n                <label>Password</label>\r\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                    <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group col\">\r\n                <label>Confirm Password</label>\r\n                <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\r\n                <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</div>\r\n                    <div *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords must match</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group form-check\">\r\n            <input type=\"checkbox\" formControlName=\"acceptTerms\" id=\"acceptTerms\" class=\"form-check-input\" [ngClass]=\"{ 'is-invalid': submitted && f.acceptTerms.errors }\" />\r\n            <label for=\"acceptTerms\" class=\"form-check-label\">Accept Terms & Conditions</label>\r\n            <div *ngIf=\"submitted && f.acceptTerms.errors\" class=\"invalid-feedback\">Accept Ts & Cs is required</div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                Register\r\n            </button>\r\n            <a routerLink=\"../login\" href=\"\" class=\"btn btn-link\">Cancel</a>\r\n        </div>\r\n    </form>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n<!-- main app container -->\r\n<!-- <div class=\"readersack\">\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n          <div class=\"col-12\">\r\n            <div class=\"text-center\">\r\n              <h4 class=\"mb-0\">Register</h4>\r\n            </div>\r\n  \r\n              <form class=\"registerForm\">\r\n                <div class=\"panel\">\r\n                    <div class=\"panel-heading bg-primary\">\r\n                        <strong> Business Info</strong> \r\n                       \r\n                    </div>\r\n                    <div class=\"panel-body\">\r\n                      <div class=\"row\">\r\n                        <div class=\"col-md-3\">\r\n                          <div class=\"form-group\">\r\n                            <label>Business Name*</label>\r\n                            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                            <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                              <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                          <div class=\"form-group\">\r\n                            <label>GST Number*</label>\r\n                            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                            <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                              <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                          <div class=\"form-group\">\r\n                            <label>EFT Info*</label>\r\n                            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                            <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                              <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                          <div class=\"form-group\">\r\n                            <label>Payment Gateways*</label>\r\n                            <select class=\"form-control company-logos\">\r\n                              <option></option>\r\n                              <option> Stripe</option>\r\n                              <option>BOM</option>\r\n                              <option><img src=\"/assets/images/interac_img.png\"> Interac</option>\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"panel\">\r\n                  <div class=\"panel-heading bg-primary\">\r\n                    <strong> Address</strong>\r\n                   </div>\r\n                   <div class=\"panel-body\">\r\n                    <div class=\"row\">\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>Address line 1*</label>\r\n                          <input type=\"text\" placeholder=\"Start typing your address...\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                          <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>Address line 2*</label>\r\n                          <input type=\"text\" placeholder=\"Unit#, Apt#, Suite#\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                          <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>City*</label>\r\n                          <select class=\"form-control\">\r\n                            <option>Select City</option>\r\n                            <option>Paris </option>\r\n                            <option>Prague </option>\r\n                            <option>New York</option>\r\n                          </select>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>State*</label>\r\n                          <select class=\"form-control\">\r\n                            <option>Select State</option>\r\n                            <option>Andhra Pradesh</option>\r\n                            <option>Goa</option>\r\n                            <option>Assam</option>\r\n                          </select>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>Country*</label>\r\n                          <select class=\"form-control\">\r\n                            <option>Select Country</option>\r\n                            <option>Russia</option>\r\n                            <option>Canada</option>\r\n                            <option>Australia</option>\r\n                            <option>India</option>\r\n                          </select>\r\n                        </div>\r\n                      </div>\r\n                  </div>\r\n                  </div>\r\n                </div>\r\n                \r\n              <div class=\"panel\">\r\n                  <div class=\"panel-heading bg-primary\">\r\n                    <div class=\"col-12 px-0\">\r\n                      <div class=\"d-flex justify-content-between\">\r\n                        <strong>Account User</strong>\r\n                        <span style=\"cursor:pointer;\"><i class=\"fas fa-plus mt-1\"></i></span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"panel-body\">\r\n                    <div class=\"row mt-1\">\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>First Name*</label>\r\n                          <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                          <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>Last Name*</label>\r\n                          <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                          <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>Email*</label>\r\n                          <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                          <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>Phone*</label>\r\n                          <input type=\"text\" formControlName=\"Phone\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                          <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.firstName.errors.required\">Phone is required</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                     \r\n                     \r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>Password*</label>\r\n                          <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                          <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-3\">\r\n                        <div class=\"form-group\">\r\n                          <label>Confirm Password*</label>\r\n                          <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                          <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                     </div>\r\n                  </div>\r\n              </div>\r\n              \r\n              <div class=\"col-12 text-center\">\r\n                <div class=\"form-group btn-group\">\r\n                  <button class=\"btn btn-primary\">Register</button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n           \r\n        \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>  -->","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\nimport { MustMatch } from '@app/_helpers';\r\n\r\nenum TokenStatus {\r\n    Validating,\r\n    Valid,\r\n    Invalid\r\n}\r\n\r\n@Component({ templateUrl: 'reset-password.component.html' })\r\nexport class ResetPasswordComponent implements OnInit {\r\n    TokenStatus = TokenStatus;\r\n    tokenStatus = TokenStatus.Validating;\r\n    token = null;\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            password: ['', [Validators.required, Validators.minLength(6)]],\r\n            confirmPassword: ['', Validators.required],\r\n        }, {\r\n            validator: MustMatch('password', 'confirmPassword')\r\n        });\r\n\r\n        const token = this.route.snapshot.queryParams['token'];\r\n\r\n        // remove token from url to prevent http referer leakage\r\n        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });\r\n\r\n        this.accountService.validateResetToken(token)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.token = token;\r\n                    this.tokenStatus = TokenStatus.Valid;\r\n                },\r\n                error: () => {\r\n                    this.tokenStatus = TokenStatus.Invalid;\r\n                }\r\n            });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.resetPassword(this.token, this.f.password.value, this.f.confirmPassword.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Password reset successful, you can now login', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<h3 class=\"card-header\">Reset Password</h3>\r\n<div class=\"card-body\">\r\n    <div *ngIf=\"tokenStatus == TokenStatus.Validating\">\r\n        Validating token...\r\n    </div>\r\n    <div *ngIf=\"tokenStatus == TokenStatus.Invalid\">\r\n        Token validation failed, if the token has expired you can get a new one at the <a routerLink=\"../forgot-password\">forgot password</a> page.\r\n    </div>\r\n    <form *ngIf=\"tokenStatus == TokenStatus.Valid\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group\">\r\n            <label>Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label>Confirm Password</label>\r\n            <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\r\n            <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</div>\r\n                <div *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords must match</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                Reset Password\r\n            </button>\r\n            <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n        </div>\r\n    </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\nenum EmailStatus {\r\n    Verifying,\r\n    Failed\r\n}\r\n\r\n@Component({ templateUrl: 'verify-email.component.html' })\r\nexport class VerifyEmailComponent implements OnInit {\r\n    EmailStatus = EmailStatus;\r\n    emailStatus = EmailStatus.Verifying;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        const token = this.route.snapshot.queryParams['token'];\r\n\r\n        // remove token from url to prevent http referer leakage\r\n        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });\r\n\r\n        this.accountService.verifyEmail(token)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Verification successful, you can now login', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: () => {\r\n                    this.emailStatus = EmailStatus.Failed;\r\n                }\r\n            });\r\n    }\r\n}","<h3 class=\"card-header\">Verify Email</h3>\r\n<div class=\"card-body\">\r\n    <div *ngIf=\"emailStatus == EmailStatus.Verifying\">\r\n        Verifying...\r\n    </div>\r\n    <div *ngIf=\"emailStatus == EmailStatus.Failed\">\r\n        Verification failed, you can also verify your account using the <a routerLink=\"forgot-password\">forgot password</a> page.\r\n    </div>\r\n</div>"],"sourceRoot":"webpack:///"}